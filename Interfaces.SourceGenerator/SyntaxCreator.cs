using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Interfaces.SourceGenerator;
internal static class SyntaxCreator
{
    internal static SyntaxToken CreateTrivia()
    {
        return SyntaxFactory.Token(
                SyntaxFactory.TriviaList(
                    new[]{
                        SyntaxFactory.Comment("// <auto-generated/>"),
                        SyntaxFactory.Trivia(
                            SyntaxFactory.PragmaWarningDirectiveTrivia(
                                SyntaxFactory.Token(SyntaxKind.DisableKeyword),
                                true)),
                        SyntaxFactory.Trivia(
                            SyntaxFactory.NullableDirectiveTrivia(
                                SyntaxFactory.Token(SyntaxKind.EnableKeyword),
                                true))}),
                SyntaxKind.NamespaceKeyword,
                SyntaxFactory.TriviaList());
    }

    internal static MemberDeclarationSyntax CreateMethod(IMethodSymbol methodSymbol)
    {
        var parameters = new SeparatedSyntaxList<ParameterSyntax>();
        foreach (var parameter in methodSymbol.Parameters)
        {
            var parameterSyntax = SyntaxFactory.Parameter(
                SyntaxFactory.Identifier(parameter.Name))
                .WithType(SyntaxFactory.ParseTypeName(parameter.Type.Name));
            parameters.Add(parameterSyntax);
        }

        var returnType = methodSymbol.ReturnType;

        return SyntaxFactory.MethodDeclaration(
             SyntaxFactory.ParseTypeName(returnType.ToDisplayString()),
             SyntaxFactory.Identifier(methodSymbol.Name))
             .WithParameterList(SyntaxFactory.ParameterList(parameters))
             .WithSemicolonToken(
                             SyntaxFactory.Token(SyntaxKind.SemicolonToken));
    }

    internal static MemberDeclarationSyntax CreateProperty(IPropertySymbol propertySymbol)
    {
        var accessors = new List<AccessorDeclarationSyntax> {
                                SyntaxFactory.AccessorDeclaration(
                                    SyntaxKind.GetAccessorDeclaration)
                                .WithSemicolonToken(
                                    SyntaxFactory.Token(SyntaxKind.SemicolonToken))
                                };

        if (propertySymbol.SetMethod != null)
        {
            accessors.Add(
                SyntaxFactory.AccessorDeclaration(
                    SyntaxKind.SetAccessorDeclaration)
                .WithSemicolonToken(
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken)));
        }

        return SyntaxFactory.PropertyDeclaration(
            SyntaxFactory.ParseTypeName(propertySymbol.Type.ToDisplayString()),
            SyntaxFactory.Identifier(propertySymbol.Name))
            .WithAccessorList(SyntaxFactory.AccessorList(SyntaxFactory.List(accessors)));
    }
}
