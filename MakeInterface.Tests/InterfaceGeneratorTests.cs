using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using VerifyCS = MakeInterface.Tests.CSharpSourceGeneratorVerifier<MakeInterface.Generator.InterfaceGenerator>;
using Microsoft.CodeAnalysis.Testing;
using MakeInterface.Generator;

namespace MakeInterface.Tests;

public class InterfaceGeneratorTests
{
    private static readonly string _header = """
        // <auto-generated/>
        #pragma warning disable
        #nullable enable
        
        """;

    private readonly ImmutableArray<string> references = AppDomain.CurrentDomain
    .GetAssemblies()
    .Where(assembly => !assembly.IsDynamic)
    .Select(assembly => assembly.Location)
    .ToImmutableArray();

    private async Task RunTestAsync(string code, string class1Code, string testModelCode)
    {
        var tester = new VerifyCS.Test
        {
            TestState =
                {
                    Sources = { code },
                    GeneratedSources =
                    {
                        (typeof(InterfaceGenerator), "IClass1.cs", SourceText.From(class1Code, Encoding.UTF8)),
                        (typeof(InterfaceGenerator), "ITestModel.cs", SourceText.From(testModelCode, Encoding.UTF8)),
                    }
                },
            ReferenceAssemblies = ReferenceAssemblies.Net.Net60
        };

        tester.ReferenceAssemblies.AddAssemblies(references);
        tester.TestState.AdditionalReferences.Add(typeof(InterfaceGenerator).Assembly);
        tester.TestState.AdditionalReferences.Add(typeof(Contracts.Attributes.GenerateInterfaceAttribute).Assembly);

        await tester.RunAsync();
    }

    [Fact]
    public async Task CreateInterface()
    {
        var code = """
#nullable enable
using MakeInterface.Tests.Models;
using MakeInterface.Contracts.Attributes;
using System.Collections.Generic;
namespace MakeInterface.Tests
{
    [GenerateInterface]
    public class Class1
    {
        public void Method1() { }
        public TestModel Test() { return new TestModel(); }
        public void Test2<T>(T data) { }
        public void Test3<T>(T data) where T : TestModel { }
        public string? Property1 { get; set; }
        public List<ITestModel?>? TestCollection() { return new List<ITestModel?>(); }
    }
}

namespace MakeInterface.Tests.Models
{
    [GenerateInterface]
    public class TestModel : ITestModel
    {
        
    }
}
""";

        var class1Code = _header + """
namespace MakeInterface.Tests;
public partial interface IClass1
{
    void Method1();
    MakeInterface.Tests.Models.TestModel Test();
    void Test2<T>(T data);
    void Test3<T>(T data)
        where T : MakeInterface.Tests.Models.TestModel;
    string? Property1 { get; set; }

    System.Collections.Generic.List<MakeInterface.Tests.Models.ITestModel?>? TestCollection();
}
""";

        var testModelCode = _header + """
namespace MakeInterface.Tests.Models;
public partial interface ITestModel
{
}
""";


        await RunTestAsync(code, class1Code, testModelCode);
        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
    }
}