using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using MakeInterface.Generator;

namespace MakeInterface.Tests;

[UsesVerify]
public class InterfaceGeneratorTests
{
    private static readonly string _header = """
        // <auto-generated/>
        #pragma warning disable
        #nullable enable
        
        """;

    private readonly ImmutableArray<string> references = AppDomain.CurrentDomain
    .GetAssemblies()
    .Where(assembly => !assembly.IsDynamic)
    .Select(assembly => assembly.Location)
    .ToImmutableArray();

    [Fact]
    public Task CreateInterface()
    {
        var source = """
#nullable enable
using MakeInterface.Tests.Models;
using MakeInterface.Contracts.Attributes;
using System.Collections.Generic;
namespace MakeInterface.Tests
{
    [GenerateInterface]
    public partial class Class1
    {
        public void Method1() { }
        public TestModel Test() { return new TestModel(); }
        public void Test2<T>(T data) { }
        public void Test3<T>(T data) where T : TestModel { }
        public string? Property1 { get; set; }
        public List<ITestModel?>? TestCollection() { return new List<ITestModel?>(); }
        public void OutMethod(out string data) { data = string.Empty; }
        public void RefMethod(ref string data) {  }
        public void DefaultNullMethod(string? data = default) {  }
        public void DefaultMethod(int data = default) {  }
    }

    public partial class Class1 
    {
        public void Method2() { }
    }
}

namespace MakeInterface.Tests.Models
{
    [GenerateInterface]
    public class TestModel : ITestModel
    {
        
    }
}
""";

        return TestHelper.Verify(source);
    }
}