{
  Diagnostics: [
    {
      Id: MI001,
      Title: MakeInterface,
      Severity: Error,
      WarningLevel: 0,
      Location: : (0,0)-(0,0),
      Description: ,
      HelpLink: ,
      MessageFormat:
System.ArgumentException: Syntax node is not within syntax tree
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.CheckSyntaxNode(CSharpSyntaxNode syntax)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(SemanticModel semanticModel, ExpressionSyntax expression, CancellationToken cancellationToken)
   at MakeInterface.Generator.InterfaceGenerator.<>c__DisplayClass4_0.<AddInterfaces>b__1(BaseTypeSyntax x) in {SolutionDirectory}MakeInterface.Generator\InterfaceGenerator.cs:line 226
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at System.Linq.Enumerable.OfTypeIterator[TResult](IEnumerable source)+MoveNext()
   at System.Linq.Enumerable.WhereEnumerableIterator`1.ToArray()
   at MakeInterface.Generator.InterfaceGenerator.AddInterfaces(InterfaceDeclarationSyntax interfaceDeclaration, ClassDeclarationSyntax classSyntax, SemanticModel semanticModel) in {SolutionDirectory}MakeInterface.Generator\InterfaceGenerator.cs:line 225
   at MakeInterface.Generator.InterfaceGenerator.GenerateInterface(String interfaceName, ClassDeclarationSyntax classSyntax, SemanticModel semanticModel) in {SolutionDirectory}MakeInterface.Generator\InterfaceGenerator.cs:line 203
   at MakeInterface.Generator.InterfaceGenerator.Generate(SourceProductionContext ctx, ValueTuple`2 input) in {SolutionDirectory}MakeInterface.Generator\InterfaceGenerator.cs:line 75,
      Message:
System.ArgumentException: Syntax node is not within syntax tree
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.CheckSyntaxNode(CSharpSyntaxNode syntax)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(SemanticModel semanticModel, ExpressionSyntax expression, CancellationToken cancellationToken)
   at MakeInterface.Generator.InterfaceGenerator.<>c__DisplayClass4_0.<AddInterfaces>b__1(BaseTypeSyntax x) in {SolutionDirectory}MakeInterface.Generator\InterfaceGenerator.cs:line 226
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at System.Linq.Enumerable.OfTypeIterator[TResult](IEnumerable source)+MoveNext()
   at System.Linq.Enumerable.WhereEnumerableIterator`1.ToArray()
   at MakeInterface.Generator.InterfaceGenerator.AddInterfaces(InterfaceDeclarationSyntax interfaceDeclaration, ClassDeclarationSyntax classSyntax, SemanticModel semanticModel) in {SolutionDirectory}MakeInterface.Generator\InterfaceGenerator.cs:line 225
   at MakeInterface.Generator.InterfaceGenerator.GenerateInterface(String interfaceName, ClassDeclarationSyntax classSyntax, SemanticModel semanticModel) in {SolutionDirectory}MakeInterface.Generator\InterfaceGenerator.cs:line 203
   at MakeInterface.Generator.InterfaceGenerator.Generate(SourceProductionContext ctx, ValueTuple`2 input) in {SolutionDirectory}MakeInterface.Generator\InterfaceGenerator.cs:line 75,
      Category: MakeInterface
    }
  ]
}